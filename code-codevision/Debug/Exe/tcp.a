;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : test_controller_project
;Version :
;Date    : 2021-05-13
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdlib.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <string.h>
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// Get a character from the USART Receiver
;#ifndef _DEBUG_TERMINAL_IO_
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 002B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002C char status,data;
; 0000 002D while (1)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
; 0000 002E       {
; 0000 002F       while (((status=UCSRA) & RX_COMPLETE)==0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0030       data=UDR;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0031       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0032          return data;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0033       }
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0034 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;#pragma used-
;#endif
;
;// Write a character to the USART Transmitter
;#ifndef _DEBUG_TERMINAL_IO_
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 003D {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003E while ((UCSRA & DATA_REGISTER_EMPTY)==0);
;PCODE: $00000029 VOL: 0
;	c -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003F UDR=c;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0040 }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void display_result(char * result){
; 0000 0047 void display_result(char * result){
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0048  lcd_clear();
;PCODE: $00000037 VOL: 0
;	*result -> Y+0
;PCODE: $00000038 VOL: 0
; 0000 0049  printf("result->%s\r",result);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 004A  lcd_puts(result);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004B  return;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004C }
;PCODE: $00000047 VOL: 0
;
;int chartoint(char *charnumber)
; 0000 004F {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0050   return atoi(charnumber);
;PCODE: $0000004A VOL: 0
;	*charnumber -> Y+0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0051 }
;PCODE: $0000004F VOL: 0
;
;int *char_num_list_to_int(char input_param[], int default_value)
; 0000 0054 {
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0055   static int int_numbers[10];
; 0000 0056     char *token;
; 0000 0057                  char char_numbers[100];
; 0000 0058              int index = 0;
; 0000 0059 
; 0000 005A   int i = 0;
; 0000 005B   if (default_value == 1)
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;	input_param -> Y+108
;	default_value -> Y+106
;	*token -> R16,R17
;	char_numbers -> Y+6
;	index -> R18,R19
;	i -> R20,R21
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 005C   {
; 0000 005D     for (i = 0; i < 10; i++)
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 005E       int_numbers[i] = 1;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005F }
; 0000 0060   else
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0061   {
; 0000 0062     for ( i = 0; i < 10; i++)
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0063       int_numbers[i] = 0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0064 }
;PCODE: $00000086 VOL: 0
; 0000 0065   strcpy(char_numbers, input_param);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0066 
; 0000 0067   token = strtok(char_numbers, " ");
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0068   /* walk through other tokens */
; 0000 0069   while (token != NULL)
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006A   {
; 0000 006B     int_numbers[index] = chartoint(token);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 006C 
; 0000 006D     token = strtok(NULL, " ");
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 006E     index += 1;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 006F   }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0070   return int_numbers;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0071 }
;PCODE: $000000AB VOL: 0
;
;void led_command(char *params)
; 0000 0074 {
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0075   int led_index = params[0] - '0';
; 0000 0076   int led_status = params[1] - '0';
; 0000 0077 
; 0000 0078   if(led_status==1)
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;	*params -> Y+4
;	led_index -> R16,R17
;	led_status -> R18,R19
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0079     PORTB = (PORTB | ( 1 << led_index ));
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 007A   if(led_status==0)
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 007B     PORTB = (PORTB & ~( 1 << led_index ));
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 007C 
; 0000 007D }
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;void alcd_command(char *text)
; 0000 007F {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0080   // print text to lcd.
; 0000 0081     lcd_clear();
;PCODE: $000000D6 VOL: 0
;	*text -> Y+0
;PCODE: $000000D7 VOL: 0
; 0000 0082     lcd_puts(text);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0083 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;void add_command(char *numbers_input)
; 0000 0085 {
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0086    char result[10];
; 0000 0087 
; 0000 0088   int *numbers = char_num_list_to_int(numbers_input, 0);
; 0000 0089   int sum = 0;
; 0000 008A   int i;
; 0000 008B   for (i = 0; i < sizeof(numbers); i++)
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;	*numbers_input -> Y+16
;	result -> Y+6
;	*numbers -> R16,R17
;	sum -> R18,R19
;	i -> R20,R21
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 008C     sum += numbers[i];
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 008F itoa(sum,result);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0090            display_result(result);
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 0091 }
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;
;void mul_command(char *numbers_input)
; 0000 0094 {
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0095    char result[10];
; 0000 0096 
; 0000 0097   int *numbers = char_num_list_to_int(numbers_input, 1);
; 0000 0098   int mul = 1;
; 0000 0099   int i;
; 0000 009A   for (i = 0; i < sizeof(numbers); i++)
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;	*numbers_input -> Y+16
;	result -> Y+6
;	*numbers -> R16,R17
;	mul -> R18,R19
;	i -> R20,R21
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 009B     mul *= numbers[i];
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 009E itoa(mul,result);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 009F            display_result(result);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00A0 }
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;void sub_command(char *numbers_input)
; 0000 00A2 {
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00A3   char result[10];
; 0000 00A4 
; 0000 00A5   int *numbers = char_num_list_to_int(numbers_input, 0);
; 0000 00A6   int sub = numbers[0];
; 0000 00A7   int i=0;
; 0000 00A8   for ( i = 1; i < sizeof(numbers); i++)
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;	*numbers_input -> Y+16
;	result -> Y+6
;	*numbers -> R16,R17
;	sub -> R18,R19
;	i -> R20,R21
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00A9     sub -= numbers[i];
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00AC itoa(sub,result);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00AD            display_result(result);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00AE }
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;
;void div_command(char *numbers_input)
; 0000 00B1 {
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00B2   char result[10];
; 0000 00B3 
; 0000 00B4   int *numbers = char_num_list_to_int(numbers_input, 1);
; 0000 00B5   float div = numbers[0];
; 0000 00B6   int i;
; 0000 00B7   for (i = 1; i < sizeof(numbers); i++)
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;	*numbers_input -> Y+18
;	result -> Y+8
;	*numbers -> R16,R17
;	div -> Y+4
;	i -> R18,R19
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00B8     div /= (float)numbers[i];
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00BB ftoa(div, 6, result);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00BC            display_result(result);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00BD }
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;
;void mod_command(char *numbers_input)
; 0000 00C0 {
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00C1   char result[10];
; 0000 00C2   int *numbers = char_num_list_to_int(numbers_input, 1);
; 0000 00C3   int mod;
; 0000 00C4   mod = numbers[0] % numbers[1];
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;	*numbers_input -> Y+14
;	result -> Y+4
;	*numbers -> R16,R17
;	mod -> R18,R19
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00C5 
; 0000 00C6   // SEND mod TO UART.
; 0000 00C7       ftoa(mod, 6, result);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00C8            display_result(result);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 00C9 }
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;void run_command(char *command_input, char *params_input)
; 0000 00CB {
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00CC   if (strcmp(command_input, "led") == 0)
;PCODE: $000001B6 VOL: 0
;	*command_input -> Y+2
;	*params_input -> Y+0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00CD   {
; 0000 00CE     led_command(params_input);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00CF   }
; 0000 00D0   else if (strcmp(command_input, "alcd") == 0)
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 00D1   {
; 0000 00D2     alcd_command(params_input);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00D3   }
; 0000 00D4   else if (strcmp(command_input, "add") == 0)
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 00D5   {
; 0000 00D6     add_command(params_input);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 00D7   }
; 0000 00D8   else if (strcmp(command_input, "sub") == 0)
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00D9   {
; 0000 00DA     sub_command(params_input);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00DB   }
; 0000 00DC   else if (strcmp(command_input, "mul") == 0)
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 00DD   {
; 0000 00DE     mul_command(params_input);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00DF   }
; 0000 00E0   else if (strcmp(command_input, "div") == 0)
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00E1   {
; 0000 00E2     div_command(params_input);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 00E3   }
; 0000 00E4   else if (strcmp(command_input, "mod") == 0)
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 00E5   {
; 0000 00E6     mod_command(params_input);
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 00E7   }
; 0000 00E8   else
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 00E9   {
; 0000 00EA     // SEND UART ERROR MESSAGE
; 0000 00EB     printf("WRONG CMD!\r");
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 00EC     return;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 00ED   }
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 00EE }
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0

	.DSEG
_0x27:
	.BYTE 0x1D
;
;void parse_command(char input_param[])
; 0000 00F1 {

	.CSEG
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 00F2 char *params;
; 0000 00F3   char *command;
; 0000 00F4   char input[100];
; 0000 00F5   strcpy(input, input_param);
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;	input_param -> Y+104
;	*params -> R16,R17
;	*command -> R18,R19
;	input -> Y+4
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 00F6 
; 0000 00F7 
; 0000 00F8   if (strchr(input, ':') == NULL)
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 00F9   {
; 0000 00FA     // wrong command, return and send error.
; 0000 00FB     printf("INVALID CMD!\r");
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 00FC     return;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 00FD   }
; 0000 00FE   command = strtok(input, ":");
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 00FF   params = strtok(NULL, "-");
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0100 
; 0000 0101   if (params == NULL)
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 0102   {
; 0000 0103     // SEND NO PARAMS ERROR
; 0000 0104     printf("NO PARAMS!\r");
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0105     return;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 0106   }
; 0000 0107   run_command(command, params);
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0108 }
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;
;
;
;void main(void)
; 0000 010D {
;PCODE: $00000251 VOL: 0
; 0000 010E // Declare your local variables here
; 0000 010F          char buffer[50];
; 0000 0110 
; 0000 0111 // Input/Output Ports initialization
; 0000 0112 // Port A initialization
; 0000 0113 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0114 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000252 VOL: 0
;	buffer -> Y+0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0115 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0116 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0117 
; 0000 0118 // Port B initialization
; 0000 0119 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 011A DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 011B // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 011C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 011D 
; 0000 011E // Port C initialization
; 0000 011F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0120 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0121 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0122 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0123 
; 0000 0124 // Port D initialization
; 0000 0125 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0126 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0127 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0128 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0129 
; 0000 012A // Timer/Counter 0 initialization
; 0000 012B // Clock source: System Clock
; 0000 012C // Clock value: Timer 0 Stopped
; 0000 012D // Mode: Normal top=0xFF
; 0000 012E // OC0 output: Disconnected
; 0000 012F TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0130 TCNT0=0x00;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0131 OCR0=0x00;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0132 
; 0000 0133 // Timer/Counter 1 initialization
; 0000 0134 // Clock source: System Clock
; 0000 0135 // Clock value: Timer1 Stopped
; 0000 0136 // Mode: Normal top=0xFFFF
; 0000 0137 // OC1A output: Disconnected
; 0000 0138 // OC1B output: Disconnected
; 0000 0139 // Noise Canceler: Off
; 0000 013A // Input Capture on Falling Edge
; 0000 013B // Timer1 Overflow Interrupt: Off
; 0000 013C // Input Capture Interrupt: Off
; 0000 013D // Compare A Match Interrupt: Off
; 0000 013E // Compare B Match Interrupt: Off
; 0000 013F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 0140 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0141 TCNT1H=0x00;
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0142 TCNT1L=0x00;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0143 ICR1H=0x00;
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 0144 ICR1L=0x00;
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0145 OCR1AH=0x00;
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0146 OCR1AL=0x00;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0147 OCR1BH=0x00;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0148 OCR1BL=0x00;
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 0149 
; 0000 014A // Timer/Counter 2 initialization
; 0000 014B // Clock source: System Clock
; 0000 014C // Clock value: Timer2 Stopped
; 0000 014D // Mode: Normal top=0xFF
; 0000 014E // OC2 output: Disconnected
; 0000 014F ASSR=0<<AS2;
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0150 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 0151 TCNT2=0x00;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 0152 OCR2=0x00;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 0153 
; 0000 0154 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0155 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 0156 
; 0000 0157 // External Interrupt(s) initialization
; 0000 0158 // INT0: Off
; 0000 0159 // INT1: Off
; 0000 015A // INT2: Off
; 0000 015B MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 015C MCUCSR=(0<<ISC2);
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 015D 
; 0000 015E 
; 0000 015F // USART initialization
; 0000 0160 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0161 // USART Receiver: On
; 0000 0162 // USART Transmitter: On
; 0000 0163 // USART Mode: Asynchronous
; 0000 0164 // USART Baud Rate: 9600
; 0000 0165 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 0166 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 0167 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 0168 UBRRH=0x00;
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 0169 UBRRL=0x33;
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 016A 
; 0000 016B // Analog Comparator initialization
; 0000 016C // Analog Comparator: Off
; 0000 016D // The Analog Comparator's positive input is
; 0000 016E // connected to the AIN0 pin
; 0000 016F // The Analog Comparator's negative input is
; 0000 0170 // connected to the AIN1 pin
; 0000 0171 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0172 SFIOR=(0<<ACME);
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 0173 
; 0000 0174 // ADC initialization
; 0000 0175 // ADC disabled
; 0000 0176 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0177 
; 0000 0178 // SPI initialization
; 0000 0179 // SPI disabled
; 0000 017A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 017B 
; 0000 017C // TWI initialization
; 0000 017D // TWI disabled
; 0000 017E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 017F 
; 0000 0180 // Alphanumeric LCD initialization
; 0000 0181 // Connections are specified in the
; 0000 0182 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0183 // RS - PORTA Bit 0
; 0000 0184 // RD - PORTA Bit 1
; 0000 0185 // EN - PORTA Bit 2
; 0000 0186 // D4 - PORTA Bit 4
; 0000 0187 // D5 - PORTA Bit 5
; 0000 0188 // D6 - PORTA Bit 6
; 0000 0189 // D7 - PORTA Bit 7
; 0000 018A // Characters/line: 16
; 0000 018B lcd_init(16);
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 018C // Global enable interrupts
; 0000 018D #asm("sei")
;PCODE: $000002A1 VOL: 0
	sei
;PCODE: $000002A2 VOL: 0
; 0000 018E lcd_clear();
;PCODE: $000002A3 VOL: 0
; 0000 018F 
; 0000 0190 while (1)
;PCODE: $000002A4 VOL: 0
; 0000 0191       {
; 0000 0192       // Place your code here
; 0000 0193            scanf("%s",buffer);
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 0194 //            printf("ok get->%s\r",buffer);
; 0000 0195             parse_command(buffer);
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0196             printf("\r");
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0197       }
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 0198 }
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
